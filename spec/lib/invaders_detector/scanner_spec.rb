# frozen_string_literal: true

require 'spec_helper'

RSpec.describe InvadersDetector::Scanner do
  subject { described_class.new(config: config).search_space_objects(radar_fraction, fraction_index) }

  let(:fraction_index) { 0 }
  let(:config) do
    instance_double(InvadersDetector::Config,
                    scanner_sensitivity: 5,
                    min_space_object_width: 8,
                    max_space_object_width: 11)
  end

  context 'with single invader' do
    let(:radar_fraction) do
      [
        '----oo----------------------------------------------------------------------------------------------',
        '---oooo---------------------------------------------------------------------------------------------',
        '--oooooo--------------------------------------------------------------------------------------------',
        '-oo-oo-oo-------------------------------------------------------------------------------------------',
        '-oooooooo-------------------------------------------------------------------------------------------',
        '---o--o---------------------------------------------------------------------------------------------',
        '--o-oo-o--------------------------------------------------------------------------------------------',
        '-o-o--o-o-------------------------------------------------------------------------------------------'
      ]
    end
    let(:expected_results) do
      [
        { x: 0, y: 0 },
        { x: 1, y: 0 },
        { x: 2, y: 0 },
        { x: 3, y: 0 },
        { x: 4, y: 0 },
        { x: 5, y: 0 },
        { x: 6, y: 0 },
        { x: 7, y: 0 }
      ]
    end

    it 'returns space objects' do
      expect(subject).to all(be_a(InvadersDetector::SpaceObject))
    end

    it 'finds space objects' do
      expect(subject.map(&:coordinates)).to eq(expected_results)
    end
  end

  context 'with bigger invader' do
    let(:radar_fraction) do
      [
        '---o-----o------------------------------------------------------------------------------------------',
        '----o---o-------------------------------------------------------------------------------------------',
        '---ooooooo------------------------------------------------------------------------------------------',
        '--oo-ooo-oo-----------------------------------------------------------------------------------------',
        '-ooooooooooo----------------------------------------------------------------------------------------',
        '-o-ooooooo-o----------------------------------------------------------------------------------------',
        '-o-o-----o-o----------------------------------------------------------------------------------------',
        '----oo-oo-------------------------------------------------------------------------------------------'
      ]
    end
    let(:expected_results) do
      [
        { x: 0, y: 0 },
        { x: 1, y: 0 },
        { x: 2, y: 0 },
        { x: 3, y: 0 },
        { x: 4, y: 0 },
        { x: 5, y: 0 },
        { x: 6, y: 0 },
        { x: 7, y: 0 },
        { x: 8, y: 0 },
        { x: 9, y: 0 }
      ]
    end

    it 'finds space object' do
      expect(subject.map(&:coordinates)).to eq(expected_results)
    end
  end

  context 'with single invader at the end ' do
    let(:radar_fraction) do
      [
        '-oooooooo-------------------------------------------------------------------------------------------',
        '---o--o---------------------------------------------------------------------------------------------',
        '--o-oo-o--------------------------------------------------------------------------------------------',
        '-o-o--o-o-------------------------------------------------------------------------------------------',
        '----------------------------------------------------------------------------------------------------',
        '----------------------------------------------------------------------------------------------------',
        '----------------------------------------------------------------------------------------------------',
        '----------------------------------------------------------------------------------------------------'
      ]
    end
    let(:expected_results) do
      [
        { x: 0, y: 0 },
        { x: 1, y: 0 },
        { x: 2, y: 0 },
        { x: 3, y: 0 },
        { x: 4, y: 0 },
        { x: 5, y: 0 },
        { x: 6, y: 0 }
      ]
    end

    it 'finds space object' do
      expect(subject.map(&:coordinates)).to eq(expected_results)
    end
  end

  context 'with single invader at the top ' do
    let(:radar_fraction) do
      [
        '------------------------------------------------------------------------------------------o-----o---',
        '-------------------------------------------------------------------------------------------o---o----',
        '------------------------------------------------------------------------------------------ooooooo---',
        '-----------------------------------------------------------------------------------------oo-ooo-oo--',
        '----------------------------------------------------------------------------------------ooooooooooo-',
        '----------------------------------------------------------------------------------------o-ooooooo-o-',
        '----------------------------------------------------------------------------------------o-o-----o-o-',
        '-------------------------------------------------------------------------------------------oo-oo----'
      ]
    end
    let(:expected_results) do
      [

        { x: 80, y: 0 },
        { x: 81, y: 0 },
        { x: 82, y: 0 },
        { x: 83, y: 0 },
        { x: 84, y: 0 },
        { x: 85, y: 0 },
        { x: 86, y: 0 },
        { x: 87, y: 0 },
        { x: 88, y: 0 },
        { x: 89, y: 0 },
        { x: 90, y: 0 },
        { x: 91, y: 0 }

      ]
    end

    it 'finds space object' do
      expect(subject.map(&:coordinates)).to eq(expected_results)
    end
  end

  context 'with unknown object' do
    let(:radar_fraction) do
      [
        '----------------------------------------------------------------------------------------------------',
        '--oooooo-o------------------------------------------------------------------------------------------',
        '--oo--oo--------------------------------------------------------------------------------------------',
        '-oo--o-oo-------------------------------------------------------------------------------------------',
        '-oooooooo-------------------------------------------------------------------------------------------',
        '-o--o-o--o------------------------------------------------------------------------------------------',
        '--o-oo-o--------------------------------------------------------------------------------------------',
        '-o-oooo-o-------------------------------------------------------------------------------------------'
      ]
    end
    let(:expected_results) do
      [
        { x: 0, y: 0 },
        { x: 1, y: 0 },
        { x: 2, y: 0 },
        { x: 3, y: 0 },
        { x: 4, y: 0 },
        { x: 5, y: 0 },
        { x: 6, y: 0 },
        { x: 7, y: 0 }
      ]
    end

    it 'finds space objects' do
      expect(subject.map(&:coordinates)).to eq(expected_results)
    end
  end

  context 'with empty radar fraction' do
    let(:radar_fraction) do
      [
        '----------------------------------------------------------------------------------------------------',
        '----------------------------------------------------------------------------------------------------',
        '----------------------------------------------------------------------------------------------------',
        '----------------------------------------------------------------------------------------------------',
        '----------------------------------------------------------------------------------------------------',
        '----------------------------------------------------------------------------------------------------',
        '----------------------------------------------------------------------------------------------------',
        '----------------------------------------------------------------------------------------------------'
      ]
    end

    it 'returns empty array' do
      expect(subject).to eq([])
    end
  end
end
